{
  "_args": [
    [
      {
        "raw": "binary-case@^1.0.0",
        "scope": null,
        "escapedName": "binary-case",
        "name": "binary-case",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/nathanielmhld/Projects/mirrorapp/candid/awsmobilejs/backend/cloud-api/media/node_modules/aws-serverless-express"
    ]
  ],
  "_from": "binary-case@>=1.0.0 <2.0.0",
  "_id": "binary-case@1.1.4",
  "_inCache": true,
  "_location": "/binary-case",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/binary-case_1.1.4_1521834685457_0.29341927948667923"
  },
  "_npmUser": {
    "name": "gi60s",
    "email": "james.speirs@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "binary-case@^1.0.0",
    "scope": null,
    "escapedName": "binary-case",
    "name": "binary-case",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/aws-serverless-express"
  ],
  "_resolved": "https://registry.npmjs.org/binary-case/-/binary-case-1.1.4.tgz",
  "_shasum": "d687104d59e38f2b9e658d3a58936963c59ab931",
  "_shrinkwrap": null,
  "_spec": "binary-case@^1.0.0",
  "_where": "/Users/nathanielmhld/Projects/mirrorapp/candid/awsmobilejs/backend/cloud-api/media/node_modules/aws-serverless-express",
  "author": {
    "name": "James Speirs"
  },
  "bugs": {
    "url": "https://github.com/Gi60s/binary-case/issues"
  },
  "dependencies": {},
  "description": "Take a string and a number and perform binary case switching on alpha characters.",
  "devDependencies": {
    "coveralls": "^2.11.14",
    "nyc": "^8.4.0",
    "tape": "^4.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9Kq8m6NZTAgy05Ryuh7U3Qc4/ujLQU1AZ5vMw4cr3igTdi5itZC6kCNrRr2X8NzPiDn2oUIFTfa71DKMnue/Zg==",
    "shasum": "d687104d59e38f2b9e658d3a58936963c59ab931",
    "tarball": "https://registry.npmjs.org/binary-case/-/binary-case-1.1.4.tgz",
    "fileCount": 12,
    "unpackedSize": 31471
  },
  "gitHead": "a53af5c542b936d6c1329895dd9b93556024d132",
  "homepage": "https://github.com/Gi60s/binary-case#readme",
  "keywords": [
    "case",
    "letter",
    "alpha"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gi60s",
      "email": "james.speirs@gmail.com"
    }
  ],
  "name": "binary-case",
  "optionalDependencies": {},
  "readme": "[![NPM version](https://img.shields.io/npm/v/binary-case.svg?style=flat)](https://npmjs.org/package/binary-case)\n[![NPM downloads](https://img.shields.io/npm/dm/binary-case.svg?style=flat)](https://npmjs.org/package/binary-case)\n[![Build status](https://img.shields.io/travis/Gi60s/binary-case.svg?style=flat)](https://travis-ci.org/Gi60s/binary-case)\n[![Test coverage](https://img.shields.io/coveralls/Gi60s/binary-case.svg?style=flat)](https://coveralls.io/r/Gi60s/binary-case?branch=master)\n\n# binary-case\n\nTake a string and a number and perform binary case switching on alpha characters.\n\n## Example\n\n```js\nconst binaryCase = require('binary-case');\n\n// 3 in binary = 011\nconst number = 3;\n\n// 011 reversed to 110 so the first 2 characters will toggle case\nconst value = binaryCase('abc', 3);     // value: \"ABc\"\n```\n\n## Installation\n\n```sh\n$ npm install binary-case\n```\n\n## API\n\n### binaryCase ( string, number [, options ] ) : string | boolean\n\nTake a string and a number and perform binary case switching on alpha characters.\n\n**Parameters**\n\n- *string* - The string value to toggle alpha character cases on.\n\n- *number* - A number that will be converted to binary to determine case switching.\n\n- *options* - An optional object that defines options for the function.\n\n    - *allowOverflow* - Defaults to `true`. Set to `false` to have the `binaryCase` function return `false` when the number provided creates a binary string that is larger than the number of alpha characters in the string provided to be converted. Overflow will cause case switching sequences to repeat.\n\n        ```js\n        binaryCase('abc', 0);                               // 'abc'\n        binaryCase('abc', 8);                               // 'abc'\n        binaryCase('abc', 8, { allowOverflow: false });     // false\n        ```\n\n**Returns** a string if successful or `false` on failure.\n\n### binaryCase.iterator ( string [, options ] ) : object\n\nGet an iterator object that will allow iteration through all variations of the string's casing.\n\n**Parameters**\n\n- *string* - The string to produce case variations for.\n\n- *options* - An optional object that defines options for the iterator.\n\n    - *startIndex* - The number to start with for producing variations. This will reduce the total number of possible variations.\n\n**Returns** an object with a *next* property.\n\n**Example**\n\n```js\nconst iterator = binaryCase.iterator('abc');\niterator.next().value;  // 'abc'\niterator.next().value;  // 'Abc'\niterator.next().value;  // 'aBc'\niterator.next().value;  // 'ABc'\n```\n\n### binaryCase.maxNumber ( string ) : number\n\nDetermine the maximum number that can be used before causing repeating case variations.\n\n**Parameters**\n\n- *string* - The string value to count the number of possible case variations on.\n\n**Returns** a number.\n\nThis calculation is simple:\n\n1. Determine how many alpha characters exist in the string (a through z and A through Z)\n2. The result is 2 to the power of the number of alpha characters, minus 1.\n\nFor example: `abc` has 3 alpha characters. `2^3 - 1 = 7`\n\n### binaryCase.variations ( string ) : string[]\n\nGet an array of all possible case variations.\n\n**Parameters**\n\n- *string* - The string value to get case variations for.\n\n**Returns** an array of  strings.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Gi60s/binary-case.git"
  },
  "scripts": {
    "test": "nyc tape test.js && nyc report --reporter=text-lcov | coveralls"
  },
  "version": "1.1.4"
}
